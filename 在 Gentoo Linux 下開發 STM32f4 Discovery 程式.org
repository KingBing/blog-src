#+TITLE: 在 Gentoo Linux 下開發 STM32f4 Discovery 程式
#+AUTHOR: coldnew
#+EMAIL:  coldnew.tw@gmail.com
#+DATE:   2013-12-21 22:10:05
#+LANGUAGE: zh_TW
#+URL:    686_g
#+OPTIONS: num:nil ^:nil
#+TAGS: stm32 stm32f4 gentoo linux

#+BLOGIT_TYPE: draft

STM32f4 Discovery 是 STMicro 所推出的 32-bit ARM Cortex-M4 基礎開發板，
市面上售價約為 NT $700 元左右。為何要選用 32-bit ARM 微控器來進行開發，


* 建立 STM32 微控器 toolchain

身為一個死忠的 Gentoo Linux 使用者，遇到需要新的 toolchain 的時候，自
然就是 =crossdev= 一下了，在 Gentoo Linux 中你可以直接用以下方式建立給
ARM 微控器用的 toolchain。

#+BEGIN_EXAMPLE
  Rosia stm32 # crossdev -s4 -t arm-none-eabi
#+END_EXAMPLE

若有需要建立 GDB，則再加上 =--ex-gdb= 這組參數。

如果你懶得使用 crossdev 編譯 toolchain，則可以到 [[https://launchpad.net/gcc-arm-embedded][GNU Tools for ARM
Embedded Processors]] 下載現成的 toolchain。

* 取得 stlink

除了 toolchain 外，我們亦需要可以在 Linux 下與 STM32 Discovery 開發版溝通
用的程式 [[https://github.com/texane/stlink][stlink]] ，若你是 Gentoo Linux 的使用者，你可以透過
[[https://github.com/coldnew/coldnew-overlay/blob/master/dev-vcs/git-wip/git-wip-0.1.ebuild][coldnew-overlay]] 來安裝 [[https://github.com/texane/stlink][stlink]] ，或是從 GitHub 上下載原始碼自己編譯、安
裝 。

#+BEGIN_EXAMPLE
  git clone https://github.com/texane/stlink.git
#+END_EXAMPLE

* 建立 Linker Script

Linker Script (LD Script) 是用來提供 Linker 針對編譯後的 Object 檔案
進行記憶體位置安排的設定、整合各 Object 檔案不同的區段，並產生執行檔。

有些人可能會有疑問，平常在使用 GCC 的時候，並不需要自己建立 Linker Script
啊?事實上，在電腦上直接執行 GCC，沒有指定 Linker Script 的情況下，系統會使用預設
的 Linker Script 來進行編譯，也因此在平常的時候我們不會需要自定義
Linker Script。在嵌入式系統下，大部分整合開發環境 (IDE) 會提供你預先製
作好的 LD Script，讓你只要點選編譯按鈕，程式就直接產生。

實際上在 STM32 Firmware 裡面已經包含現成可以使用的 linker 腳本了，但是
為了能更好理解整個開發流程，這邊就讓我們自己來建立這個腳本吧。首先建立
名為 =stm32.ld= 的檔案，並添加以下內容：

#+BEGIN_SRC ld-script
  /* This will work with STM32 type of microcontrollers.    *
   ,* The sizes of RAM and flash are specified smaller than  *
   ,* what most of the STM32 provide to ensure that the demo *
   ,* program will run on ANY STM32.                         */
  MEMORY
  {
          RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 20K
          ROM (rx)  : ORIGIN = 0x00000000, LENGTH = 128K
  }

  SECTIONS
  {
          .  = 0x0;         /* From 0x00000000 */
          .text :
          {
                  ,*(vectors)    /* Vector table */
                  ,*(.text)      /* Program code */
                  ,*(.rodata)    /* Read only data */
          } >ROM

          .  = 0x20000000;  /* From 0x20000000 */
          .data :
          {
                  ,*(.data)      /* Data memory */
          } >RAM AT > ROM

          .bss :
          {
                  ,*(.bss)       /* Zero-filled run time allocate data memory */
          } >RAM AT > ROM
  }
#+END_SRC

要怎樣了解這個 Linker Script 呢? 首先我們先來看 MEMORY 這個區段

#+BEGIN_SRC ld-script
  MEMORY
  {
          RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 20K
          ROM (rx)  : ORIGIN = 0x00000000, LENGTH = 128K
  }
#+END_SRC

MEMORY 區段告訴了 linker 說我要把


了解了 MEMORY 區段後，讓我們來看看 SECTION 區段，SECTION 區段是用來描述
輸出文件的記憶體佈局，在這邊的範例裡面，我們將他分為以下幾個區段。

- text (程式碼區段)

  這個區段是用來儲存程式的指令碼

- data (資料區段)

  這個區段用來存放 *可寫 (Writable)* 程式碼區段與資料。


  我們指定 data section 的位址為 0x20000000，該區段放置了程式裡面所有

  #+BEGIN_SRC ld-script
    .  = 0x20000000;  /* From 0x20000000 */
    .data :
    {
            ,*(.data)      /* Data memory */
    } >RAM AT > ROM
  #+END_SRC

  在 data 區段末有一個 *>RAM AT >ROM* 描述，這是告訴 linker 說要先把編
  譯好的 data，

- bss (未初始化資料區段)

  #+BEGIN_SRC ld-script
    .bss :
    {
            ,*(.bss)       /* Zero-filled run time allocate data memory */
    } >RAM AT > ROM
  #+END_SRC



* 參考連結

~[1]~ [[http://hackaday.com/2011/10/17/how-to-develop-for-stm32-discovery-boards-using-linux/][How to develop for STM32 discovery boards using linux]]

~[2]~ [[http://descent-incoming.blogspot.tw/2013/04/for-stm32f4discovery-0-linux.html][作業系統之前的程式 for stm32f4discovery (0) - 打造 linux 開發環境]]

~[3]~ [[http://liviube.wordpress.com/2013/04/22/blink-for-stm32f4-discovery-board-on-linux-with-makefile/][Blink for stm32f4-discovery board on Linux with Makefile]]

~[4]~ [[https://github.com/texane/stlink/blob/master/doc/tutorial/tutorial.pdf?raw%3Dtrue][Using STM32 discovery kits with open source tools (PDF)]]

~[5]~ [[http://www.triplespark.net/elec/pdev/arm/stm32.html][Programming STM32 F2, F4 ARMs under Linux: A Tutorial from Scratch]]

~[6]~ [[http://www.wolinlabs.com/blog/linux.stm32.discovery.gcc.html][STM32 Discovery Development On Linux]]

~[7]~ [[http://jeremyherbert.net/get/stm32f4_getting_started][Getting Started with the STM32F4 and GCC]]

~[8]~ [[http://xenyinzen.wikidot.com/os-dev:ldscript][心映真的空間 - ldscript 腳本知識]]

~[9]~ [[http://developers.stf12.net/cpp-demo/gcc-linker-script-and-stm32-a-tutorial][GCC linker script and STM32 (a tutorial)]]

~[10]~ [[http://fun-tech.se/stm32/index.php][STM32/ARM Cortex-M3 HOWTO: Development under Ubuntu (Debian)]]

~[11]~ [[http://home.educities.edu.tw/fushiyun2000/index.htm][司徒的教學網站]]

~[12]~ [[http://www.jollen.org/EmbeddedLinux/Program_Loading.html][Jollen's Blog - Program Loading 觀念介紹]]
