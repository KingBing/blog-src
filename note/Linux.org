#+TITLE: Linux 筆記
#+AUTHOR: coldnew
#+EMAIL:  coldnew.tw@gmail.com
#+DATE:   2013-12-06 17:09:51
#+LANGUAGE: zh_TW
#+URL:    linux
#+OPTIONS: num:nil ^:nil
#+BLOGIT_TYPE: note

* 透過 sysfs 控制 CPU

- 關閉/打開 CPU

  #+BEGIN_SRC sh
    # this urns the cpu core with id 1 off
    echo 0 > /sys/devices/system/cpu/cpu1/online

    # this turns the core back on
    echo 1 > /sys/devices/system/cpu/cpu1/online
  #+END_SRC

- 取得目前 CPU 的頻率

  #+BEGIN_SRC sh
    # reads the current frequency of core 0
    cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq
  #+END_SRC

- 調整 CPU 最大的頻率

  #+BEGIN_SRC sh
    # set maximum cpu core frequency to 792 MHz
    echo 792000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq

    # set maximum cpu core frequency to 996 MHz
    echo 996000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
  #+END_SRC

* 讓你的 ssh 免密碼登入                                                 :ssh:

** 建立不用密碼的金鑰

#+begin_src sh
  ssh-keygen -t rsa
#+end_src

** 將你的免密碼金鑰複製到遠端機器

假設你的免密碼金鑰是 =~/.ssh/id_rsa.pub= ，遠端帳號是 =account= ，伺服
器是 =server.com= ，使用下列指令可以複製你的免密碼金鑰到遠端伺服器。

#+begin_src sh
  cat ~/.ssh/id_rsa.pub | ssh account@server.com 'cat >> ~/.ssh/authorized_keys'
#+end_src

** 上述指令無法運作的狀況

假如你使用上述指令仍舊無法直接登入遠端伺服器，則有可能是 ssh 版本的問題，請再試試下面的方法。

#+begin_src sh
  cat ~/.ssh/id_rsa.pub | ssh account@server.com 'cat >> ~/.ssh/authorized_keys2'
#+end_src

登入到遠端伺服器，並且

#+begin_src sh
  chmod 700 ~/.ssh
  chmod 640 ~/.ssh/authorized_keys2
#+end_src
** 使用 ssh-copy-id 簡化上面步驟

#+BEGIN_EXAMPLE
  coldnew@Rosia ~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub pi@192.168.1.21
#+END_EXAMPLE

* 檢查 glibc 的相容狀況

若要檢查 glibc 可以相容的版本，可以透過以下命令取得

#+BEGIN_EXAMPLE
   coldnew@Rosia ~ $ strings /lib/libc.so.6 | grep GLIBC_

   GLIBC_2.2.5
   GLIBC_2.2.6
   GLIBC_2.3
   GLIBC_2.3.2
   GLIBC_2.3.3
   GLIBC_2.3.4
   GLIBC_2.4
   GLIBC_2.5
   GLIBC_2.6
   GLIBC_2.7
   GLIBC_2.8
   GLIBC_2.9
   GLIBC_2.10
   GLIBC_2.11
   GLIBC_PRIVATE
#+END_EXAMPLE

從上面的例子，可以看到我測試用的這台機器，glibc 最多只支援到 2.11 版。
* git 使用筆記                                                          :git:
** 重新命名本地端 branch

#+BEGIN_SRC sh
git branch -m <oldname> <newname>
#+END_SRC

** 重新命名遠端 repo

#+BEGIN_SRC sh
  git remote -v
  # View existing remotes
  # origin  git@github.com:user/repo.git (fetch)
  # origin  git@github.com:user/repo.git (push)

  git remote rename origin destination
  # Change remote name from 'origin' to 'destination'

  git remote -v
  # Verify remote's new name
  # destination  git@github.com:user/repo.git (fetch)
  # destination  git@github.com:user/repo.git (push)
#+END_SRC

** 移除遠端 repo 的分支

移除遠端的分支，可以使用以下兩種方式
#+begin_src sh
  git push origin --delete <branchName>
#+end_src

或是以下簡化的方式

#+begin_src sh
  git push origin :<branchName>
#+end_src

** 移除未被追蹤的檔案

: git clean -f

** 修正 git repo 錯誤 : Cannot obtain needed object

在使用 git 來下載 repo 的時候，如過遇到以下錯誤

#+BEGIN_EXAMPLE
  Fetching projects: 96% (78/81) error: Unable to find
  93784f3b5e153c90a138783162ed794bc9ffea88 under
  http://android.git.linaro.org/git-ro/platform/prebuilt Cannot obtain
  needed object 93784f3b5e153c90a138783162ed794bc9ffea88 while
  processing commit a1e60337875460ecba8bc770da2aa3414068c253. error:
  Fetch failed.
#+END_EXAMPLE

首先使用

: git fsck

接著在使用

: git gc

來修正這個有問題的 repo

* dmesg: klogctl failed: Bad address

如果使用 dmesg 時，遇到

: dmesg: klogctl failed: Bad address

這種情況有可能是 rootfs 空間不夠，檢查一下吧 ~
* Bash 筆記                                                            :bash:

** 讓 script 告知其目前所在的路徑

- 最簡單的方式，但不支援 symlink

  #+begin_src sh
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  #+end_src

- 複雜的方式，支援 symlink

  #+begin_src sh
    SOURCE="${BASH_SOURCE[0]}"
    DIR="$( dirname "$SOURCE" )"
    while [ -h "$SOURCE" ]
    do
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  #+end_src

** 將所有的空資料夾加上 .gitkeep

#+BEGIN_SRC sh
  for i in $(find . -type d -empty); do touch $i/.gitkeep; done
#+END_SRC
